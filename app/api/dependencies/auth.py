"""
Authentication dependencies
–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
"""

from typing import Optional, Union
from fastapi import Depends, HTTPException, Header, Query, status
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select
from loguru import logger

from app.api.dependencies.database import get_database_session
from app.models.user import User
from app.core.config import telegram_settings


class TelegramAuth:
    """–ö–ª–∞—Å—Å –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Telegram"""

    def __init__(self, session: AsyncSession):
        self.session = session

    async def get_user_by_telegram_id(self, telegram_id: int) -> Optional[User]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID

        Args:
            telegram_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram

        Returns:
            User –∏–ª–∏ None
        """
        try:
            query = select(User).where(User.telegram_id == telegram_id)
            result = await self.session.execute(query)
            user = result.scalar_one_or_none()

            if user:
                # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                from datetime import datetime
                user.last_activity = datetime.now()
                await self.session.commit()

            return user

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}: {e}")
            return None

    async def create_user_from_telegram(self, telegram_data: dict) -> User:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –¥–∞–Ω–Ω—ã—Ö Telegram

        Args:
            telegram_data: –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram

        Returns:
            User: –°–æ–∑–¥–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        """
        try:
            user = User(
                telegram_id=telegram_data.get("id"),
                username=telegram_data.get("username"),
                first_name=telegram_data.get("first_name"),
                last_name=telegram_data.get("last_name"),
                language_code=telegram_data.get("language_code")
            )

            self.session.add(user)
            await self.session.commit()
            await self.session.refresh(user)

            logger.info(f"üë§ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.telegram_id}")
            return user

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            await self.session.rollback()
            raise

    async def get_or_create_user(self, telegram_data: dict) -> User:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        Args:
            telegram_data: –î–∞–Ω–Ω—ã–µ –∏–∑ Telegram

        Returns:
            User: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        """
        telegram_id = telegram_data.get("id")
        if not telegram_id:
            raise ValueError("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç telegram_id")

        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await self.get_user_by_telegram_id(telegram_id)

        if not user:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = await self.create_user_from_telegram(telegram_data)

        return user


async def get_telegram_auth(
        session: AsyncSession = Depends(get_database_session)
) -> TelegramAuth:
    """
    Dependency –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è TelegramAuth

    Args:
        session: –°–µ—Å—Å–∏—è –ë–î

    Returns:
        TelegramAuth: –≠–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    """
    return TelegramAuth(session)


async def get_current_user(
        x_telegram_user: Optional[str] = Header(None, alias="X-Telegram-User"),
        telegram_id: Optional[int] = Query(None, alias="user_id"),
        auth: TelegramAuth = Depends(get_telegram_auth)
) -> User:
    """
    Dependency –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    Args:
        x_telegram_user: –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ (JSON)
        telegram_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ query –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö
        auth: –°–µ—Ä–≤–∏—Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏

    Returns:
        User: –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å

    Raises:
        HTTPException: –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω
    """
    user = None

    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
    if x_telegram_user:
        try:
            import json
            telegram_data = json.loads(x_telegram_user)
            user = await auth.get_or_create_user(telegram_data)
            logger.debug(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞: {user.telegram_id}")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞: {e}")

    # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ telegram_id
    if not user and telegram_id:
        user = await auth.get_user_by_telegram_id(telegram_id)
        logger.debug(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ ID: {telegram_id}")

    if not user:
        logger.warning("üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω")
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω"
        )

    if not user.is_active:
        logger.warning(f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.telegram_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"
        )

    return user


async def get_current_user_optional(
        x_telegram_user: Optional[str] = Header(None, alias="X-Telegram-User"),
        telegram_id: Optional[int] = Query(None, alias="user_id"),
        auth: TelegramAuth = Depends(get_telegram_auth)
) -> Optional[User]:
    """
    Dependency –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

    Args:
        x_telegram_user: –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ
        telegram_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ query –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö
        auth: –°–µ—Ä–≤–∏—Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏

    Returns:
        User –∏–ª–∏ None
    """
    try:
        return await get_current_user(x_telegram_user, telegram_id, auth)
    except HTTPException:
        return None


async def get_admin_user(
        current_user: User = Depends(get_current_user)
) -> User:
    """
    Dependency –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

    Args:
        current_user: –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å

    Returns:
        User: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä

    Raises:
        HTTPException: –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
    """
    if not current_user.is_admin:
        logger.warning(f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {current_user.telegram_id} –Ω–µ –∞–¥–º–∏–Ω")
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞"
        )

    logger.debug(f"‚öôÔ∏è –ê–¥–º–∏–Ω {current_user.telegram_id} –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω")
    return current_user


# –ì–æ—Ç–æ–≤—ã–µ dependencies –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
CurrentUser = Depends(get_current_user)
CurrentUserOptional = Depends(get_current_user_optional)
AdminUser = Depends(get_admin_user)