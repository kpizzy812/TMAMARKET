"""
API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–æ–≤–∞—Ä–∞–º–∏
"""

from typing import List, Optional
from fastapi import APIRouter, Depends, HTTPException, Query, UploadFile, File, status
from sqlalchemy.ext.asyncio import AsyncSession
from loguru import logger

from app.api.dependencies.database import get_database_session
from app.api.dependencies.auth import get_current_user_optional, get_admin_user
from app.models.user import User
from app.schemas.product import (
    ProductResponseSchema,
    ProductCatalogSchema,
    ProductAdminSchema,
    ProductCreateSchema,
    ProductUpdateSchema,
    ProductFilterSchema,
    ProductSearchSchema,
    ProductStockUpdateSchema,
    ProductStatsSchema
)
from app.schemas import PaginatedResponseSchema, StatusResponseSchema
from app.services.product_service import ProductService


router = APIRouter()


@router.get(
    "/catalog",
    response_model=PaginatedResponseSchema,
    summary="–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞ —Ç–æ–≤–∞—Ä–æ–≤",
    description="–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –∫–∞—Ç–∞–ª–æ–≥–∞ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"
)
async def get_products_catalog(
    category: Optional[str] = Query(None, description="–§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"),
    search: Optional[str] = Query(None, min_length=2, description="–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é"),
    min_price: Optional[float] = Query(None, ge=0, description="–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞"),
    max_price: Optional[float] = Query(None, gt=0, description="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞"),
    in_stock: Optional[bool] = Query(None, description="–¢–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä—ã –≤ –Ω–∞–ª–∏—á–∏–∏"),
    sort_by: str = Query("sort_order", description="–ü–æ–ª–µ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏"),
    sort_desc: bool = Query(False, description="–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —É–±—ã–≤–∞–Ω–∏—é"),
    page: int = Query(1, ge=1, description="–ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã"),
    per_page: int = Query(20, ge=1, le=100, description="–¢–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ"),
    session: AsyncSession = Depends(get_database_session),
    current_user: Optional[User] = Depends(get_current_user_optional)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤"""

    try:
        # –°–æ–∑–¥–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
        filters = ProductFilterSchema(
            category=category,
            search=search,
            min_price=min_price,
            max_price=max_price,
            in_stock=in_stock,
            sort_by=sort_by,
            sort_desc=sort_desc,
            page=page,
            per_page=per_page,
            is_available=True,  # –¢–æ–ª—å–∫–æ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤
            is_hidden=False     # –¢–æ–ª—å–∫–æ –≤–∏–¥–∏–º—ã–µ —Ç–æ–≤–∞—Ä—ã
        )

        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
        product_service = ProductService(session)
        result = await product_service.get_products_catalog(filters, include_hidden=False)

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ö–µ–º—ã –∫–∞—Ç–∞–ª–æ–≥–∞
        catalog_items = [
            ProductCatalogSchema.model_validate(product)
            for product in result["products"]
        ]

        logger.info(f"üì¶ –ö–∞—Ç–∞–ª–æ–≥ –∑–∞–ø—Ä–æ—à–µ–Ω: {len(catalog_items)} —Ç–æ–≤–∞—Ä–æ–≤, —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}")

        return PaginatedResponseSchema(
            items=catalog_items,
            pagination=result["pagination"]
        )

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–∞–ª–æ–≥–∞ —Ç–æ–≤–∞—Ä–æ–≤"
        )


@router.get(
    "/{product_id}",
    response_model=ProductResponseSchema,
    summary="–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –ø–æ ID",
    description="–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ"
)
async def get_product_details(
    product_id: int,
    session: AsyncSession = Depends(get_database_session),
    current_user: Optional[User] = Depends(get_current_user_optional)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ"""

    try:
        product_service = ProductService(session)
        product = await product_service.get_product_by_id(product_id)

        if not product:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail="–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω"
            )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if not current_user or not current_user.is_admin:
            if product.is_hidden or not product.is_available:
                raise HTTPException(
                    status_code=status.HTTP_404_NOT_FOUND,
                    detail="–¢–æ–≤–∞—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
                )

        logger.info(f"üì¶ –ó–∞–ø—Ä–æ—à–µ–Ω —Ç–æ–≤–∞—Ä: {product.name} (ID: {product_id})")

        return ProductResponseSchema.model_validate(product)

    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ {product_id}: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–∞"
        )


@router.post(
    "/search",
    response_model=List[ProductCatalogSchema],
    summary="–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤",
    description="–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é, –æ–ø–∏—Å–∞–Ω–∏—é –∏ —Ç–µ–≥–∞–º"
)
async def search_products(
    search_data: ProductSearchSchema,
    session: AsyncSession = Depends(get_database_session),
    current_user: Optional[User] = Depends(get_current_user_optional)
):
    """–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤"""

    try:
        product_service = ProductService(session)

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞
        if search_data.category:
            filters = ProductFilterSchema(
                search=search_data.query,
                category=search_data.category,
                per_page=search_data.limit,
                is_available=True,
                is_hidden=False
            )
            result = await product_service.get_products_catalog(filters)
            products = result["products"]
        else:
            products = await product_service.search_products(
                search_data.query,
                search_data.limit
            )

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ö–µ–º—ã –∫–∞—Ç–∞–ª–æ–≥–∞
        search_results = [
            ProductCatalogSchema.model_validate(product)
            for product in products
        ]

        logger.info(f"üîç –ü–æ–∏—Å–∫ '{search_data.query}': –Ω–∞–π–¥–µ–Ω–æ {len(search_results)} —Ç–æ–≤–∞—Ä–æ–≤")

        return search_results

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤"
        )


@router.get(
    "/categories/list",
    response_model=List[str],
    summary="–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π",
    description="–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–æ–≤–∞—Ä–æ–≤"
)
async def get_categories(
    session: AsyncSession = Depends(get_database_session)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""

    try:
        product_service = ProductService(session)
        categories = await product_service.get_categories()

        logger.info(f"üìÇ –ó–∞–ø—Ä–æ—à–µ–Ω—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {len(categories)} –Ω–∞–π–¥–µ–Ω–æ")

        return categories

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"
        )


# === –ê–î–ú–ò–ù–°–ö–ò–ï –≠–ù–î–ü–û–ò–ù–¢–´ ===

@router.get(
    "/admin/all",
    response_model=PaginatedResponseSchema,
    summary="[ADMIN] –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤",
    description="–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω–∞, –≤–∫–ª—é—á–∞—è —Å–∫—Ä—ã—Ç—ã–µ",
    dependencies=[Depends(get_admin_user)]
)
async def get_all_products_admin(
    category: Optional[str] = Query(None, description="–§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"),
    search: Optional[str] = Query(None, description="–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é"),
    is_available: Optional[bool] = Query(None, description="–§–∏–ª—å—Ç—Ä –ø–æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏"),
    is_hidden: Optional[bool] = Query(None, description="–§–∏–ª—å—Ç—Ä –ø–æ –≤–∏–¥–∏–º–æ—Å—Ç–∏"),
    in_stock: Optional[bool] = Query(None, description="–§–∏–ª—å—Ç—Ä –ø–æ –Ω–∞–ª–∏—á–∏—é"),
    sort_by: str = Query("created_at", description="–ü–æ–ª–µ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏"),
    sort_desc: bool = Query(True, description="–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —É–±—ã–≤–∞–Ω–∏—é"),
    page: int = Query(1, ge=1, description="–ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã"),
    per_page: int = Query(20, ge=1, le=100, description="–¢–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ"),
    session: AsyncSession = Depends(get_database_session),
    admin_user: User = Depends(get_admin_user)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""

    try:
        filters = ProductFilterSchema(
            category=category,
            search=search,
            is_available=is_available,
            is_hidden=is_hidden,
            in_stock=in_stock,
            sort_by=sort_by,
            sort_desc=sort_desc,
            page=page,
            per_page=per_page
        )

        product_service = ProductService(session)
        result = await product_service.get_products_catalog(filters, include_hidden=True)

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –∞–¥–º–∏–Ω—Å–∫–∏–µ —Å—Ö–µ–º—ã
        admin_items = [
            ProductAdminSchema.model_validate(product)
            for product in result["products"]
        ]

        logger.info(f"‚öôÔ∏è –ê–¥–º–∏–Ω –∑–∞–ø—Ä–æ—Å–∏–ª –≤—Å–µ —Ç–æ–≤–∞—Ä—ã: {len(admin_items)} –Ω–∞–π–¥–µ–Ω–æ")

        return PaginatedResponseSchema(
            items=admin_items,
            pagination=result["pagination"]
        )

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω–∞: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤"
        )


@router.post(
    "/admin/create",
    response_model=ProductAdminSchema,
    summary="[ADMIN] –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞",
    description="–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞",
    status_code=status.HTTP_201_CREATED,
    dependencies=[Depends(get_admin_user)]
)
async def create_product_admin(
    product_data: ProductCreateSchema,
    session: AsyncSession = Depends(get_database_session),
    admin_user: User = Depends(get_admin_user)
):
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞"""

    try:
        product_service = ProductService(session)
        product = await product_service.create_product(product_data)

        if not product:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"
            )

        logger.success(f"‚öôÔ∏è –ê–¥–º–∏–Ω {admin_user.telegram_id} —Å–æ–∑–¥–∞–ª —Ç–æ–≤–∞—Ä: {product.name}")

        return ProductAdminSchema.model_validate(product)

    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"
        )


@router.put(
    "/admin/{product_id}",
    response_model=ProductAdminSchema,
    summary="[ADMIN] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞",
    description="–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–æ–≤–∞—Ä–∞",
    dependencies=[Depends(get_admin_user)]
)
async def update_product_admin(
    product_id: int,
    product_data: ProductUpdateSchema,
    session: AsyncSession = Depends(get_database_session),
    admin_user: User = Depends(get_admin_user)
):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞"""

    try:
        product_service = ProductService(session)
        product = await product_service.update_product(product_id, product_data)

        if not product:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail="–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω"
            )

        logger.success(f"‚öôÔ∏è –ê–¥–º–∏–Ω {admin_user.telegram_id} –æ–±–Ω–æ–≤–∏–ª —Ç–æ–≤–∞—Ä: {product.name}")

        return ProductAdminSchema.model_validate(product)

    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ {product_id}: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"
        )


@router.delete(
    "/admin/{product_id}",
    response_model=StatusResponseSchema,
    summary="[ADMIN] –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞",
    description="–£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞",
    dependencies=[Depends(get_admin_user)]
)
async def delete_product_admin(
    product_id: int,
    session: AsyncSession = Depends(get_database_session),
    admin_user: User = Depends(get_admin_user)
):
    """–£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞"""

    try:
        product_service = ProductService(session)
        success = await product_service.delete_product(product_id)

        if not success:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail="–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω"
            )

        logger.success(f"‚öôÔ∏è –ê–¥–º–∏–Ω {admin_user.telegram_id} —É–¥–∞–ª–∏–ª —Ç–æ–≤–∞—Ä ID: {product_id}")

        return StatusResponseSchema(
            success=True,
            message="–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω"
        )

    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ {product_id}: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"
        )


@router.patch(
    "/admin/{product_id}/stock",
    response_model=StatusResponseSchema,
    summary="[ADMIN] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–∞",
    description="–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ",
    dependencies=[Depends(get_admin_user)]
)
async def update_product_stock(
    product_id: int,
    stock_data: ProductStockUpdateSchema,
    session: AsyncSession = Depends(get_database_session),
    admin_user: User = Depends(get_admin_user)
):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–∞ —Ç–æ–≤–∞—Ä–∞"""

    try:
        product_service = ProductService(session)
        success = await product_service.update_stock(product_id, stock_data.stock_quantity)

        if not success:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail="–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω"
            )

        logger.success(f"‚öôÔ∏è –ê–¥–º–∏–Ω {admin_user.telegram_id} –æ–±–Ω–æ–≤–∏–ª –æ—Å—Ç–∞—Ç–æ–∫ —Ç–æ–≤–∞—Ä–∞ {product_id}: {stock_data.stock_quantity}")

        return StatusResponseSchema(
            success=True,
            message=f"–û—Å—Ç–∞—Ç–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω: {stock_data.stock_quantity} —à—Ç."
        )

    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–∞ —Ç–æ–≤–∞—Ä–∞ {product_id}: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–∞"
        )


@router.get(
    "/admin/low-stock",
    response_model=List[ProductAdminSchema],
    summary="[ADMIN] –¢–æ–≤–∞—Ä—ã —Å –Ω–∏–∑–∫–∏–º –æ—Å—Ç–∞—Ç–∫–æ–º",
    description="–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ —Å –Ω–∏–∑–∫–∏–º –æ—Å—Ç–∞—Ç–∫–æ–º",
    dependencies=[Depends(get_admin_user)]
)
async def get_low_stock_products(
    threshold: Optional[int] = Query(None, ge=1, description="–ü–æ—Ä–æ–≥ –Ω–∏–∑–∫–æ–≥–æ –æ—Å—Ç–∞—Ç–∫–∞"),
    session: AsyncSession = Depends(get_database_session),
    admin_user: User = Depends(get_admin_user)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ —Å –Ω–∏–∑–∫–∏–º –æ—Å—Ç–∞—Ç–∫–æ–º"""

    try:
        product_service = ProductService(session)
        products = await product_service.get_low_stock_products(threshold)

        low_stock_items = [
            ProductAdminSchema.model_validate(product)
            for product in products
        ]

        logger.info(f"‚öôÔ∏è –ê–¥–º–∏–Ω –∑–∞–ø—Ä–æ—Å–∏–ª —Ç–æ–≤–∞—Ä—ã —Å –Ω–∏–∑–∫–∏–º –æ—Å—Ç–∞—Ç–∫–æ–º: {len(low_stock_items)} –Ω–∞–π–¥–µ–Ω–æ")

        return low_stock_items

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ —Å –Ω–∏–∑–∫–∏–º –æ—Å—Ç–∞—Ç–∫–æ–º: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ —Å –Ω–∏–∑–∫–∏–º –æ—Å—Ç–∞—Ç–∫–æ–º"
        )


@router.post(
    "/admin/{product_id}/image",
    response_model=StatusResponseSchema,
    summary="[ADMIN] –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",
    description="–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Ç–æ–≤–∞—Ä–∞",
    dependencies=[Depends(get_admin_user)]
)
async def upload_product_image(
    product_id: int,
    image: UploadFile = File(..., description="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞"),
    session: AsyncSession = Depends(get_database_session),
    admin_user: User = Depends(get_admin_user)
):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
        if image.content_type not in ["image/jpeg", "image/png", "image/webp"]:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞. –†–∞–∑—Ä–µ—à–µ–Ω—ã: JPEG, PNG, WebP"
            )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        if image.size > 10 * 1024 * 1024:  # 10MB
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 10MB"
            )

        # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª–∞
        image_data = await image.read()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
        product_service = ProductService(session)
        file_path = await product_service.save_product_image(
            product_id, image_data, image.filename
        )

        if not file_path:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"
            )

        logger.success(f"‚öôÔ∏è –ê–¥–º–∏–Ω {admin_user.telegram_id} –∑–∞–≥—Ä—É–∑–∏–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ {product_id}")

        return StatusResponseSchema(
            success=True,
            message="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ",
            data={"image_path": file_path}
        )

    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ {product_id}: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"
        )


@router.get(
    "/admin/{product_id}/stats",
    response_model=ProductStatsSchema,
    summary="[ADMIN] –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ–≤–∞—Ä–∞",
    description="–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–¥–∞–∂ —Ç–æ–≤–∞—Ä–∞",
    dependencies=[Depends(get_admin_user)]
)
async def get_product_stats(
    product_id: int,
    session: AsyncSession = Depends(get_database_session),
    admin_user: User = Depends(get_admin_user)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–æ–≤–∞—Ä–∞"""

    try:
        product_service = ProductService(session)
        stats = await product_service.get_product_stats(product_id)

        if not stats:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail="–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω"
            )

        logger.info(f"‚öôÔ∏è –ê–¥–º–∏–Ω –∑–∞–ø—Ä–æ—Å–∏–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–æ–≤–∞—Ä–∞ {product_id}")

        return ProductStatsSchema.model_validate(stats)

    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–æ–≤–∞—Ä–∞ {product_id}: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–æ–≤–∞—Ä–∞"
        )