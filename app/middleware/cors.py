"""
CORS Middleware
–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫—Ä–æ—Å—Å-–¥–æ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
"""

from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from loguru import logger

from app.core.config import settings


def setup_cors(app: FastAPI) -> None:
    """
    –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS –¥–ª—è FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è

    Args:
        app: –≠–∫–∑–µ–º–ø–ª—è—Ä FastAPI
    """

    # –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ origins
    allowed_origins = []

    # –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ
    if settings.DEBUG:
        allowed_origins = ["*"]
        logger.warning("üîì CORS: –†–∞–∑—Ä–µ—à–µ–Ω—ã –≤—Å–µ origins (—Ä–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)")
    else:
        # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        allowed_origins = [str(origin) for origin in settings.BACKEND_CORS_ORIGINS]
        logger.info(f"üîí CORS: –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ origins: {allowed_origins}")

    # –î–æ–±–∞–≤–ª—è–µ–º middleware
    app.add_middleware(
        CORSMiddleware,
        allow_origins=allowed_origins,
        allow_credentials=True,
        allow_methods=[
            "GET",
            "POST",
            "PUT",
            "PATCH",
            "DELETE",
            "OPTIONS"
        ],
        allow_headers=[
            "Authorization",
            "Content-Type",
            "X-Requested-With",
            "X-API-Key",
            "X-User-ID",
            "Accept",
            "Origin",
            "Cache-Control"
        ],
        expose_headers=[
            "X-Total-Count",
            "X-Page-Count",
            "X-Rate-Limit-Remaining",
            "X-Request-ID"
        ]
    )

    logger.success("‚úÖ CORS middleware –Ω–∞—Å—Ç—Ä–æ–µ–Ω")