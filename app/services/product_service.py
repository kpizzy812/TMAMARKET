"""
–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–æ–≤–∞—Ä–∞–º–∏
–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–æ–º, –æ—Å—Ç–∞—Ç–∫–∞–º–∏, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
"""

import os
import aiofiles
from typing import List, Optional, Dict, Any
from decimal import Decimal
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, update, delete, func, and_, or_
from sqlalchemy.orm import selectinload
from loguru import logger

from app.models.product import Product
from app.schemas.product import (
    ProductCreateSchema,
    ProductUpdateSchema,
    ProductFilterSchema
)
from app.core.config import marketplace_settings
from app.services.telegram.message_service import MessageService


class ProductService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–æ–≤–∞—Ä–∞–º–∏"""

    def __init__(self, session: AsyncSession):
        self.session = session
        self.message_service = MessageService()

    async def get_product_by_id(self, product_id: int) -> Optional[Product]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –ø–æ ID

        Args:
            product_id: ID —Ç–æ–≤–∞—Ä–∞

        Returns:
            Product –∏–ª–∏ None
        """
        try:
            query = select(Product).where(Product.id == product_id)
            result = await self.session.execute(query)
            product = result.scalar_one_or_none()

            if product:
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
                product.increment_views()
                await self.session.commit()

            return product

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ {product_id}: {e}")
            return None

    async def get_products_catalog(
            self,
            filters: Optional[ProductFilterSchema] = None,
            include_hidden: bool = False
    ) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞ —Ç–æ–≤–∞—Ä–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π

        Args:
            filters: –§–∏–ª—å—Ç—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞
            include_hidden: –í–∫–ª—é—á–∞—Ç—å –ª–∏ —Å–∫—Ä—ã—Ç—ã–µ —Ç–æ–≤–∞—Ä—ã

        Returns:
            Dict —Å —Ç–æ–≤–∞—Ä–∞–º–∏ –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        """
        try:
            # –ë–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            query = select(Product)

            # –§–∏–ª—å—Ç—Ä—ã –≤–∏–¥–∏–º–æ—Å—Ç–∏
            if not include_hidden:
                query = query.where(Product.is_hidden == False)

            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
            if filters:
                # –§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                if filters.category:
                    query = query.where(Product.category == filters.category)

                # –§–∏–ª—å—Ç—Ä –ø–æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
                if filters.is_available is not None:
                    query = query.where(Product.is_available == filters.is_available)

                # –§–∏–ª—å—Ç—Ä –ø–æ –Ω–∞–ª–∏—á–∏—é
                if filters.in_stock is not None:
                    if filters.in_stock:
                        query = query.where(Product.stock_quantity > 0)
                    else:
                        query = query.where(Product.stock_quantity <= 0)

                # –§–∏–ª—å—Ç—Ä –ø–æ —Ü–µ–Ω–µ
                if filters.min_price is not None:
                    query = query.where(Product.price >= filters.min_price)
                if filters.max_price is not None:
                    query = query.where(Product.price <= filters.max_price)

                # –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
                if filters.search:
                    search_pattern = f"%{filters.search.lower()}%"
                    query = query.where(
                        or_(
                            func.lower(Product.name).like(search_pattern),
                            func.lower(Product.description).like(search_pattern),
                            func.lower(Product.tags).like(search_pattern)
                        )
                    )

            # –ü–æ–¥—Å—á–µ—Ç –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
            count_query = select(func.count(Product.id)).select_from(query.subquery())
            total_result = await self.session.execute(count_query)
            total = total_result.scalar()

            # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
            if filters and filters.sort_by:
                if hasattr(Product, filters.sort_by):
                    sort_column = getattr(Product, filters.sort_by)
                    if filters.sort_desc:
                        query = query.order_by(sort_column.desc())
                    else:
                        query = query.order_by(sort_column)
                else:
                    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
                    query = query.order_by(Product.sort_order, Product.created_at.desc())
            else:
                query = query.order_by(Product.sort_order, Product.created_at.desc())

            # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
            if filters:
                offset = (filters.page - 1) * filters.per_page
                query = query.offset(offset).limit(filters.per_page)

            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
            result = await self.session.execute(query)
            products = result.scalars().all()

            # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            pagination = {}
            if filters:
                total_pages = (total + filters.per_page - 1) // filters.per_page
                pagination = {
                    "page": filters.page,
                    "per_page": filters.per_page,
                    "total": total,
                    "total_pages": total_pages,
                    "has_next": filters.page < total_pages,
                    "has_prev": filters.page > 1
                }

            logger.info(f"üì¶ –ü–æ–ª—É—á–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(products)} –∏–∑ {total}")

            return {
                "products": products,
                "pagination": pagination,
                "total": total
            }

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞: {e}")
            return {"products": [], "pagination": {}, "total": 0}

    async def create_product(self, product_data: ProductCreateSchema) -> Optional[Product]:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞

        Args:
            product_data: –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞

        Returns:
            –°–æ–∑–¥–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä –∏–ª–∏ None
        """
        try:
            # –°–æ–∑–¥–∞–µ–º —Ç–æ–≤–∞—Ä
            product = Product(**product_data.model_dump())

            self.session.add(product)
            await self.session.commit()
            await self.session.refresh(product)

            logger.success(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ç–æ–≤–∞—Ä: {product.name} (ID: {product.id})")
            return product

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞: {e}")
            await self.session.rollback()
            return None

    async def update_product(
            self,
            product_id: int,
            product_data: ProductUpdateSchema
    ) -> Optional[Product]:
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞

        Args:
            product_id: ID —Ç–æ–≤–∞—Ä–∞
            product_data: –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è

        Returns:
            –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä –∏–ª–∏ None
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä
            product = await self.get_product_by_id(product_id)
            if not product:
                logger.warning(f"‚ö†Ô∏è –¢–æ–≤–∞—Ä {product_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return None

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—ã–π –æ—Å—Ç–∞—Ç–æ–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            old_stock = product.stock_quantity

            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è
            update_data = product_data.model_dump(exclude_unset=True)
            for field, value in update_data.items():
                setattr(product, field, value)

            await self.session.commit()
            await self.session.refresh(product)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–∞
            new_stock = product.stock_quantity
            if new_stock != old_stock:
                await self._check_low_stock_notification(product)

            logger.success(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω —Ç–æ–≤–∞—Ä: {product.name} (ID: {product.id})")
            return product

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ {product_id}: {e}")
            await self.session.rollback()
            return None

    async def delete_product(self, product_id: int) -> bool:
        """
        –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞

        Args:
            product_id: ID —Ç–æ–≤–∞—Ä–∞

        Returns:
            True –µ—Å–ª–∏ —É–¥–∞–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ–≤–∞—Ä –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–∞—Ö
            # TODO: –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤

            query = delete(Product).where(Product.id == product_id)
            result = await self.session.execute(query)
            await self.session.commit()

            if result.rowcount > 0:
                logger.success(f"‚úÖ –£–¥–∞–ª–µ–Ω —Ç–æ–≤–∞—Ä ID: {product_id}")
                return True
            else:
                logger.warning(f"‚ö†Ô∏è –¢–æ–≤–∞—Ä {product_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
                return False

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ {product_id}: {e}")
            await self.session.rollback()
            return False

    async def update_stock(self, product_id: int, new_quantity: int) -> bool:
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–∞ —Ç–æ–≤–∞—Ä–∞

        Args:
            product_id: ID —Ç–æ–≤–∞—Ä–∞
            new_quantity: –ù–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ

        Returns:
            True –µ—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            product = await self.get_product_by_id(product_id)
            if not product:
                return False

            old_quantity = product.stock_quantity
            product.stock_quantity = new_quantity

            await self.session.commit()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∏–∑–∫–æ–º –æ—Å—Ç–∞—Ç–∫–µ
            await self._check_low_stock_notification(product)

            logger.info(f"üì¶ –û—Å—Ç–∞—Ç–æ–∫ —Ç–æ–≤–∞—Ä–∞ {product.name}: {old_quantity} ‚Üí {new_quantity}")
            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–∞ —Ç–æ–≤–∞—Ä–∞ {product_id}: {e}")
            await self.session.rollback()
            return False

    async def reserve_stock(self, product_id: int, quantity: int) -> bool:
        """
        –†–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (—É–º–µ–Ω—å—à–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–∞)

        Args:
            product_id: ID —Ç–æ–≤–∞—Ä–∞
            quantity: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è

        Returns:
            True –µ—Å–ª–∏ –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            product = await self.get_product_by_id(product_id)
            if not product:
                logger.warning(f"‚ö†Ô∏è –¢–æ–≤–∞—Ä {product_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è")
                return False

            if not product.can_order_quantity(quantity):
                logger.warning(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–≤–∞—Ä–∞ {product.name} –¥–ª—è —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è {quantity}")
                return False

            await product.update_stock(-quantity)
            await self.session.commit()

            logger.info(f"üì¶ –ó–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–æ {quantity} —à—Ç. —Ç–æ–≤–∞—Ä–∞ {product.name}")
            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ {product_id}: {e}")
            await self.session.rollback()
            return False

    async def restore_stock(self, product_id: int, quantity: int) -> bool:
        """
        –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (—É–≤–µ–ª–∏—á–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–∞)

        Args:
            product_id: ID —Ç–æ–≤–∞—Ä–∞
            quantity: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è

        Returns:
            True –µ—Å–ª–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            product = await self.get_product_by_id(product_id)
            if not product:
                return False

            await product.update_stock(quantity)
            await self.session.commit()

            logger.info(f"üì¶ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {quantity} —à—Ç. —Ç–æ–≤–∞—Ä–∞ {product.name}")
            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ {product_id}: {e}")
            await self.session.rollback()
            return False

    async def search_products(self, query: str, limit: int = 10) -> List[Product]:
        """
        –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏ –æ–ø–∏—Å–∞–Ω–∏—é

        Args:
            query: –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤

        Returns:
            –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
        """
        try:
            search_pattern = f"%{query.lower()}%"

            sql_query = select(Product).where(
                and_(
                    Product.is_available == True,
                    Product.is_hidden == False,
                    or_(
                        func.lower(Product.name).like(search_pattern),
                        func.lower(Product.description).like(search_pattern),
                        func.lower(Product.tags).like(search_pattern)
                    )
                )
            ).order_by(Product.sort_order).limit(limit)

            result = await self.session.execute(sql_query)
            products = result.scalars().all()

            logger.info(f"üîç –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}': {len(products)}")
            return products

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤: {e}")
            return []

    async def get_categories(self) -> List[str]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–æ–≤–∞—Ä–æ–≤

        Returns:
            –°–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        """
        try:
            query = select(Product.category).where(
                and_(
                    Product.category.isnot(None),
                    Product.is_hidden == False
                )
            ).distinct()

            result = await self.session.execute(query)
            categories = [cat for cat in result.scalars().all() if cat]

            logger.info(f"üìÇ –ù–∞–π–¥–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {len(categories)}")
            return categories

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {e}")
            return []

    async def get_low_stock_products(self, threshold: Optional[int] = None) -> List[Product]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ —Å –Ω–∏–∑–∫–∏–º –æ—Å—Ç–∞—Ç–∫–æ–º

        Args:
            threshold: –ü–æ—Ä–æ–≥ –Ω–∏–∑–∫–æ–≥–æ –æ—Å—Ç–∞—Ç–∫–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫)

        Returns:
            –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ —Å –Ω–∏–∑–∫–∏–º –æ—Å—Ç–∞—Ç–∫–æ–º
        """
        try:
            if threshold is None:
                threshold = marketplace_settings.LOW_STOCK_THRESHOLD

            query = select(Product).where(
                and_(
                    Product.is_available == True,
                    Product.stock_quantity < threshold,
                    Product.stock_quantity > 0
                )
            ).order_by(Product.stock_quantity)

            result = await self.session.execute(query)
            products = result.scalars().all()

            logger.info(f"‚ö†Ô∏è –¢–æ–≤–∞—Ä–æ–≤ —Å –Ω–∏–∑–∫–∏–º –æ—Å—Ç–∞—Ç–∫–æ–º: {len(products)}")
            return products

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ —Å –Ω–∏–∑–∫–∏–º –æ—Å—Ç–∞—Ç–∫–æ–º: {e}")
            return []

    async def save_product_image(self, product_id: int, image_data: bytes, filename: str) -> Optional[str]:
        """
        –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞

        Args:
            product_id: ID —Ç–æ–≤–∞—Ä–∞
            image_data: –î–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            filename: –ò–º—è —Ñ–∞–π–ª–∞

        Returns:
            –ü—É—Ç—å –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É –∏–ª–∏ None
        """
        try:
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            upload_dir = os.path.join(marketplace_settings.UPLOAD_PATH, "products")
            os.makedirs(upload_dir, exist_ok=True)

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
            file_extension = os.path.splitext(filename)[1]
            new_filename = f"product_{product_id}_{hash(filename)}{file_extension}"
            file_path = os.path.join(upload_dir, new_filename)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
            async with aiofiles.open(file_path, 'wb') as f:
                await f.write(image_data)

            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—É—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            relative_path = f"products/{new_filename}"
            await self.update_product(product_id, ProductUpdateSchema(image_path=relative_path))

            logger.success(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ {product_id}: {relative_path}")
            return relative_path

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ {product_id}: {e}")
            return None

    async def _check_low_stock_notification(self, product: Product) -> None:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∏–∑–∫–æ–º –æ—Å—Ç–∞—Ç–∫–µ

        Args:
            product: –¢–æ–≤–∞—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        """
        try:
            if product.is_low_stock and product.stock_quantity > 0:
                message = (
                    f"‚ö†Ô∏è *–ù–∏–∑–∫–∏–π –æ—Å—Ç–∞—Ç–æ–∫ —Ç–æ–≤–∞—Ä–∞*\n\n"
                    f"üì¶ *–¢–æ–≤–∞—Ä:* {product.name}\n"
                    f"üìä *–û—Å—Ç–∞—Ç–æ–∫:* {product.stock_quantity} —à—Ç.\n"
                    f"üí∞ *–¶–µ–Ω–∞:* {product.display_price}\n\n"
                    f"–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–æ–ø–æ–ª–Ω–∏—Ç—å –æ—Å—Ç–∞—Ç–æ–∫ —Ç–æ–≤–∞—Ä–∞."
                )

                await self.message_service.send_admin_notification(message)
                logger.warning(f"‚ö†Ô∏è –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∏–∑–∫–æ–º –æ—Å—Ç–∞—Ç–∫–µ: {product.name}")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∏–∑–∫–æ–º –æ—Å—Ç–∞—Ç–∫–µ: {e}")

    async def get_product_stats(self, product_id: int) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–æ–≤–∞—Ä–∞

        Args:
            product_id: ID —Ç–æ–≤–∞—Ä–∞

        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        """
        try:
            product = await self.get_product_by_id(product_id)
            if not product:
                return {}

            # TODO: –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–∫–∞–∑–æ–≤
            # total_ordered_quantity = ...
            # revenue = ...
            # last_ordered = ...

            return {
                "views_count": product.views_count,
                "orders_count": product.orders_count,
                "total_ordered_quantity": 0,  # TODO
                "revenue": Decimal('0.00'),  # TODO
                "last_ordered": None,  # TODO
                "current_stock": product.stock_quantity,
                "is_low_stock": product.is_low_stock
            }

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–æ–≤–∞—Ä–∞ {product_id}: {e}")
            return {}