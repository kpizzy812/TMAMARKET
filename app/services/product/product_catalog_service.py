"""
–°–µ—Ä–≤–∏—Å –∫–∞—Ç–∞–ª–æ–≥–∞ —Ç–æ–≤–∞—Ä–æ–≤
–ü–æ–∏—Å–∫, —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è, –ø–∞–≥–∏–Ω–∞—Ü–∏—è, –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
"""

from typing import List, Optional, Dict, Any
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, func, and_, or_
from loguru import logger

from app.models.product import Product
from app.schemas.product import ProductFilterSchema


class ProductCatalogService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–∞—Ç–∞–ª–æ–≥–æ–º —Ç–æ–≤–∞—Ä–æ–≤"""

    def __init__(self, session: AsyncSession):
        self.session = session

    async def get_catalog(
            self,
            filters: Optional[ProductFilterSchema] = None,
            include_hidden: bool = False
    ) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞ —Ç–æ–≤–∞—Ä–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π

        Args:
            filters: –§–∏–ª—å—Ç—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞
            include_hidden: –í–∫–ª—é—á–∞—Ç—å –ª–∏ —Å–∫—Ä—ã—Ç—ã–µ —Ç–æ–≤–∞—Ä—ã

        Returns:
            Dict —Å —Ç–æ–≤–∞—Ä–∞–º–∏ –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        """
        try:
            # –ë–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            query = select(Product)

            # –§–∏–ª—å—Ç—Ä—ã –≤–∏–¥–∏–º–æ—Å—Ç–∏
            if not include_hidden:
                query = query.where(Product.is_hidden == False)

            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
            query = self._apply_filters(query, filters)

            # –ü–æ–¥—Å—á–µ—Ç –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
            total = await self._count_total(query)

            # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
            query = self._apply_sorting(query, filters)

            # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
            if filters:
                offset = (filters.page - 1) * filters.per_page
                query = query.offset(offset).limit(filters.per_page)

            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
            result = await self.session.execute(query)
            products = result.scalars().all()

            # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            pagination = self._build_pagination(filters, total)

            logger.info(f"üì¶ –ü–æ–ª—É—á–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(products)} –∏–∑ {total}")

            return {
                "products": products,
                "pagination": pagination,
                "total": total
            }

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞: {e}")
            return {"products": [], "pagination": {}, "total": 0}

    async def search_products(self, query: str, limit: int = 10) -> List[Product]:
        """
        –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏ –æ–ø–∏—Å–∞–Ω–∏—é

        Args:
            query: –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤

        Returns:
            –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
        """
        try:
            search_pattern = f"%{query.lower()}%"

            sql_query = select(Product).where(
                and_(
                    Product.is_available == True,
                    Product.is_hidden == False,
                    or_(
                        func.lower(Product.name).like(search_pattern),
                        func.lower(Product.description).like(search_pattern),
                        func.lower(Product.tags).like(search_pattern)
                    )
                )
            ).order_by(Product.sort_order).limit(limit)

            result = await self.session.execute(sql_query)
            products = result.scalars().all()

            logger.info(f"üîç –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}': {len(products)}")
            return products

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤: {e}")
            return []

    async def get_categories(self) -> List[str]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–æ–≤–∞—Ä–æ–≤

        Returns:
            –°–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        """
        try:
            query = select(Product.category).where(
                and_(
                    Product.category.isnot(None),
                    Product.is_hidden == False
                )
            ).distinct()

            result = await self.session.execute(query)
            categories = [cat for cat in result.scalars().all() if cat]

            logger.info(f"üìÇ –ù–∞–π–¥–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {len(categories)}")
            return categories

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {e}")
            return []

    async def get_products_by_category(self, category: str, limit: int = 20) -> List[Product]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏

        Args:
            category: –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤

        Returns:
            –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        """
        try:
            query = select(Product).where(
                and_(
                    Product.category == category,
                    Product.is_available == True,
                    Product.is_hidden == False
                )
            ).order_by(Product.sort_order).limit(limit)

            result = await self.session.execute(query)
            products = result.scalars().all()

            logger.info(f"üìÇ –¢–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}': {len(products)}")
            return products

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category}: {e}")
            return []

    async def get_featured_products(self, limit: int = 10) -> List[Product]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤

        Args:
            limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤

        Returns:
            –°–ø–∏—Å–æ–∫ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
        """
        try:
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏ (–ø—Ä–æ—Å–º–æ—Ç—Ä—ã + –∑–∞–∫–∞–∑—ã)
            query = select(Product).where(
                and_(
                    Product.is_available == True,
                    Product.is_hidden == False,
                    Product.stock_quantity > 0
                )
            ).order_by(
                (Product.views_count + Product.orders_count * 10).desc(),
                Product.created_at.desc()
            ).limit(limit)

            result = await self.session.execute(query)
            products = result.scalars().all()

            logger.info(f"‚≠ê –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤: {len(products)}")
            return products

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤: {e}")
            return []

    def _apply_filters(self, query, filters: Optional[ProductFilterSchema]):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∫ –∑–∞–ø—Ä–æ—Å—É"""
        if not filters:
            return query

        # –§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if filters.category:
            query = query.where(Product.category == filters.category)

        # –§–∏–ª—å—Ç—Ä –ø–æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
        if filters.is_available is not None:
            query = query.where(Product.is_available == filters.is_available)

        # –§–∏–ª—å—Ç—Ä –ø–æ –≤–∏–¥–∏–º–æ—Å—Ç–∏
        if filters.is_hidden is not None:
            query = query.where(Product.is_hidden == filters.is_hidden)

        # –§–∏–ª—å—Ç—Ä –ø–æ –Ω–∞–ª–∏—á–∏—é
        if filters.in_stock is not None:
            if filters.in_stock:
                query = query.where(Product.stock_quantity > 0)
            else:
                query = query.where(Product.stock_quantity <= 0)

        # –§–∏–ª—å—Ç—Ä –ø–æ —Ü–µ–Ω–µ
        if filters.min_price is not None:
            query = query.where(Product.price >= filters.min_price)
        if filters.max_price is not None:
            query = query.where(Product.price <= filters.max_price)

        # –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
        if filters.search:
            search_pattern = f"%{filters.search.lower()}%"
            query = query.where(
                or_(
                    func.lower(Product.name).like(search_pattern),
                    func.lower(Product.description).like(search_pattern),
                    func.lower(Product.tags).like(search_pattern)
                )
            )

        return query

    def _apply_sorting(self, query, filters: Optional[ProductFilterSchema]):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –∫ –∑–∞–ø—Ä–æ—Å—É"""
        if filters and filters.sort_by:
            if hasattr(Product, filters.sort_by):
                sort_column = getattr(Product, filters.sort_by)
                if filters.sort_desc:
                    query = query.order_by(sort_column.desc())
                else:
                    query = query.order_by(sort_column)
            else:
                # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
                query = query.order_by(Product.sort_order, Product.created_at.desc())
        else:
            query = query.order_by(Product.sort_order, Product.created_at.desc())

        return query

    async def _count_total(self, query) -> int:
        """–ü–æ–¥—Å—á–µ—Ç –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–æ–≤"""
        try:
            count_query = select(func.count(Product.id)).select_from(query.subquery())
            total_result = await self.session.execute(count_query)
            return total_result.scalar()
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ —Ç–æ–≤–∞—Ä–æ–≤: {e}")
            return 0

    def _build_pagination(self, filters: Optional[ProductFilterSchema], total: int) -> Dict[str, Any]:
        """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –ø–∞–≥–∏–Ω–∞—Ü–∏–∏"""
        if not filters:
            return {}

        total_pages = (total + filters.per_page - 1) // filters.per_page
        return {
            "page": filters.page,
            "per_page": filters.per_page,
            "total": total,
            "total_pages": total_pages,
            "has_next": filters.page < total_pages,
            "has_prev": filters.page > 1
        }