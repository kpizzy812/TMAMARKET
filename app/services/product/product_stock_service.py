"""
–°–µ—Ä–≤–∏—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–∞–º–∏ —Ç–æ–≤–∞—Ä–æ–≤
–†–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ, –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∏–∑–∫–æ–º –æ—Å—Ç–∞—Ç–∫–µ
"""

from typing import List, Optional
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, and_
from loguru import logger

from app.models.product import Product
from app.core.config import marketplace_settings
from app.services.telegram.message_service import MessageService


class ProductStockService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–∞–º–∏ —Ç–æ–≤–∞—Ä–æ–≤"""

    def __init__(self, session: AsyncSession):
        self.session = session
        self.message_service = MessageService()

    async def update_stock(self, product_id: int, new_quantity: int) -> bool:
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–∞ —Ç–æ–≤–∞—Ä–∞

        Args:
            product_id: ID —Ç–æ–≤–∞—Ä–∞
            new_quantity: –ù–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ

        Returns:
            True –µ—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            product = await self._get_product(product_id)
            if not product:
                return False

            old_quantity = product.stock_quantity
            product.stock_quantity = new_quantity

            await self.session.commit()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∏–∑–∫–æ–º –æ—Å—Ç–∞—Ç–∫–µ
            await self._check_low_stock_notification(product)

            logger.info(f"üì¶ –û—Å—Ç–∞—Ç–æ–∫ —Ç–æ–≤–∞—Ä–∞ {product.name}: {old_quantity} ‚Üí {new_quantity}")
            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–∞ —Ç–æ–≤–∞—Ä–∞ {product_id}: {e}")
            await self.session.rollback()
            return False

    async def reserve_stock(self, product_id: int, quantity: int) -> bool:
        """
        –†–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (—É–º–µ–Ω—å—à–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–∞)

        Args:
            product_id: ID —Ç–æ–≤–∞—Ä–∞
            quantity: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è

        Returns:
            True –µ—Å–ª–∏ –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            product = await self._get_product(product_id)
            if not product:
                logger.warning(f"‚ö†Ô∏è –¢–æ–≤–∞—Ä {product_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è")
                return False

            if not product.can_order_quantity(quantity):
                logger.warning(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–≤–∞—Ä–∞ {product.name} –¥–ª—è —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è {quantity}")
                return False

            success = await product.update_stock(-quantity)
            if not success:
                return False

            await self.session.commit()

            logger.info(f"üì¶ –ó–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–æ {quantity} —à—Ç. —Ç–æ–≤–∞—Ä–∞ {product.name}")
            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ {product_id}: {e}")
            await self.session.rollback()
            return False

    async def restore_stock(self, product_id: int, quantity: int) -> bool:
        """
        –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (—É–≤–µ–ª–∏—á–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–∞)

        Args:
            product_id: ID —Ç–æ–≤–∞—Ä–∞
            quantity: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è

        Returns:
            True –µ—Å–ª–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            product = await self._get_product(product_id)
            if not product:
                return False

            success = await product.update_stock(quantity)
            if not success:
                return False

            await self.session.commit()

            logger.info(f"üì¶ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {quantity} —à—Ç. —Ç–æ–≤–∞—Ä–∞ {product.name}")
            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ {product_id}: {e}")
            await self.session.rollback()
            return False

    async def bulk_reserve_stock(self, items: List[dict]) -> bool:
        """
        –ú–∞—Å—Å–æ–≤–æ–µ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ (–¥–ª—è –∑–∞–∫–∞–∑–∞)

        Args:
            items: –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π {"product_id": int, "quantity": int}

        Returns:
            True –µ—Å–ª–∏ –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ
        """
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤
            for item in items:
                product_id = item["product_id"]
                quantity = item["quantity"]

                product = await self._get_product(product_id)
                if not product:
                    logger.warning(f"‚ö†Ô∏è –¢–æ–≤–∞—Ä {product_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return False

                if not product.can_order_quantity(quantity):
                    logger.warning(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–≤–∞—Ä–∞ {product.name} –¥–ª—è –∑–∞–∫–∞–∑–∞ {quantity}")
                    return False

            # –ï—Å–ª–∏ –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—à–ª–∏, —Ä–µ–∑–µ—Ä–≤–∏—Ä—É–µ–º
            for item in items:
                product_id = item["product_id"]
                quantity = item["quantity"]

                product = await self._get_product(product_id)
                await product.update_stock(-quantity)

            await self.session.commit()

            logger.info(f"üì¶ –ú–∞—Å—Å–æ–≤–æ –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–æ {len(items)} –ø–æ–∑–∏—Ü–∏–π")
            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            await self.session.rollback()
            return False

    async def bulk_restore_stock(self, items: List[dict]) -> bool:
        """
        –ú–∞—Å—Å–æ–≤–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ (–ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–∫–∞–∑–∞)

        Args:
            items: –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π {"product_id": int, "quantity": int}

        Returns:
            True –µ—Å–ª–∏ –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ
        """
        try:
            for item in items:
                product_id = item["product_id"]
                quantity = item["quantity"]

                product = await self._get_product(product_id)
                if product:
                    await product.update_stock(quantity)

            await self.session.commit()

            logger.info(f"üì¶ –ú–∞—Å—Å–æ–≤–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {len(items)} –ø–æ–∑–∏—Ü–∏–π")
            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
            await self.session.rollback()
            return False

    async def get_low_stock_products(self, threshold: Optional[int] = None) -> List[Product]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ —Å –Ω–∏–∑–∫–∏–º –æ—Å—Ç–∞—Ç–∫–æ–º

        Args:
            threshold: –ü–æ—Ä–æ–≥ –Ω–∏–∑–∫–æ–≥–æ –æ—Å—Ç–∞—Ç–∫–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫)

        Returns:
            –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ —Å –Ω–∏–∑–∫–∏–º –æ—Å—Ç–∞—Ç–∫–æ–º
        """
        try:
            if threshold is None:
                threshold = marketplace_settings.LOW_STOCK_THRESHOLD

            query = select(Product).where(
                and_(
                    Product.is_available == True,
                    Product.stock_quantity < threshold,
                    Product.stock_quantity > 0
                )
            ).order_by(Product.stock_quantity)

            result = await self.session.execute(query)
            products = result.scalars().all()

            logger.info(f"‚ö†Ô∏è –¢–æ–≤–∞—Ä–æ–≤ —Å –Ω–∏–∑–∫–∏–º –æ—Å—Ç–∞—Ç–∫–æ–º: {len(products)}")
            return products

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ —Å –Ω–∏–∑–∫–∏–º –æ—Å—Ç–∞—Ç–∫–æ–º: {e}")
            return []

    async def check_product_availability(self, product_id: int, quantity: int) -> dict:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞

        Args:
            product_id: ID —Ç–æ–≤–∞—Ä–∞
            quantity: –ñ–µ–ª–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ

        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
        """
        try:
            product = await self._get_product(product_id)
            if not product:
                return {
                    "available": False,
                    "reason": "–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω",
                    "max_quantity": 0
                }

            if not product.is_purchasable:
                return {
                    "available": False,
                    "reason": "–¢–æ–≤–∞—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø–æ–∫—É–ø–∫–∏",
                    "max_quantity": 0
                }

            if not product.can_order_quantity(quantity):
                return {
                    "available": False,
                    "reason": f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ. –î–æ—Å—Ç—É–ø–Ω–æ: {product.get_max_available_quantity()}",
                    "max_quantity": product.get_max_available_quantity()
                }

            return {
                "available": True,
                "reason": "–¢–æ–≤–∞—Ä –¥–æ—Å—Ç—É–ø–µ–Ω",
                "max_quantity": product.get_max_available_quantity()
            }

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–∞ {product_id}: {e}")
            return {
                "available": False,
                "reason": "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏",
                "max_quantity": 0
            }

    async def get_stock_movements_summary(self, product_id: int) -> dict:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –¥–≤–∏–∂–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤ —Ç–æ–≤–∞—Ä–∞

        Args:
            product_id: ID —Ç–æ–≤–∞—Ä–∞

        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –¥–≤–∏–∂–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤
        """
        try:
            product = await self._get_product(product_id)
            if not product:
                return {}

            # TODO: –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å—ã –∫ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            # reserved_quantity = await self._get_reserved_quantity(product_id)
            # total_sold = await self._get_total_sold(product_id)

            return {
                "current_stock": product.stock_quantity,
                "is_low_stock": product.is_low_stock,
                "is_in_stock": product.is_in_stock,
                "max_order_quantity": product.get_max_available_quantity(),
                "reserved_quantity": 0,  # TODO
                "total_sold": 0,  # TODO
                "stock_status": product.stock_status
            }

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–¥–∫–∏ –æ—Å—Ç–∞—Ç–∫–æ–≤ —Ç–æ–≤–∞—Ä–∞ {product_id}: {e}")
            return {}

    async def _get_product(self, product_id: int) -> Optional[Product]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –ø–æ ID"""
        try:
            query = select(Product).where(Product.id == product_id)
            result = await self.session.execute(query)
            return result.scalar_one_or_none()
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ {product_id}: {e}")
            return None

    async def _check_low_stock_notification(self, product: Product) -> None:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∏–∑–∫–æ–º –æ—Å—Ç–∞—Ç–∫–µ

        Args:
            product: –¢–æ–≤–∞—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        """
        try:
            if product.is_low_stock and product.stock_quantity > 0:
                message = (
                    f"‚ö†Ô∏è *–ù–∏–∑–∫–∏–π –æ—Å—Ç–∞—Ç–æ–∫ —Ç–æ–≤–∞—Ä–∞*\n\n"
                    f"üì¶ *–¢–æ–≤–∞—Ä:* {product.name}\n"
                    f"üìä *–û—Å—Ç–∞—Ç–æ–∫:* {product.stock_quantity} —à—Ç.\n"
                    f"üí∞ *–¶–µ–Ω–∞:* {product.display_price}\n\n"
                    f"–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–æ–ø–æ–ª–Ω–∏—Ç—å –æ—Å—Ç–∞—Ç–æ–∫ —Ç–æ–≤–∞—Ä–∞."
                )

                await self.message_service.send_admin_notification(message)
                logger.warning(f"‚ö†Ô∏è –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∏–∑–∫–æ–º –æ—Å—Ç–∞—Ç–∫–µ: {product.name}")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∏–∑–∫–æ–º –æ—Å—Ç–∞—Ç–∫–µ: {e}")

    # TODO: –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏—Å—Ç–æ—Ä–∏–µ–π –¥–≤–∏–∂–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤
    # async def _get_reserved_quantity(self, product_id: int) -> int:
    # async def _get_total_sold(self, product_id: int) -> int:
    # async def create_stock_movement_record(self, product_id: int, movement_type: str, quantity: int, reason: str):