"""
–û—Å–Ω–æ–≤–Ω–æ–µ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
Telegram Marketplace Backend
"""

import sys
import time
from contextlib import asynccontextmanager
from fastapi import FastAPI, Request, Response
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
from loguru import logger

from app.core.config import settings, telegram_settings
from app.core.database import create_tables
from app.middleware.cors import setup_cors
from app.middleware.error_handler import setup_error_handlers
from app.api.v1.api import api_router


def setup_logging() -> None:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ loguru"""

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    logger.remove()

    # –ö–æ–Ω—Å–æ–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –∫—Ä–∞—Å–∏–≤—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º
    logger.add(
        sys.stdout,
        format="<green>{time:YYYY-MM-DD HH:mm:ss}</green> | "
               "<level>{level: <8}</level> | "
               "<cyan>{name}</cyan>:<cyan>{function}</cyan>:<cyan>{line}</cyan> | "
               "<level>{message}</level>",
        level="DEBUG" if settings.DEBUG else "INFO",
        colorize=True,
        backtrace=True,
        diagnose=True
    )

    # –§–∞–π–ª–æ–≤–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    logger.add(
        "logs/app.log",
        format="{time:YYYY-MM-DD HH:mm:ss} | {level: <8} | {name}:{function}:{line} | {message}",
        level="INFO",
        rotation="10 MB",
        retention="30 days",
        compression="zip",
        backtrace=True,
        diagnose=False  # –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ
    )

    # –û—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –æ—à–∏–±–æ–∫
    logger.add(
        "logs/error.log",
        format="{time:YYYY-MM-DD HH:mm:ss} | {level: <8} | {name}:{function}:{line} | {message}",
        level="ERROR",
        rotation="5 MB",
        retention="90 days",
        compression="zip",
        backtrace=True,
        diagnose=True
    )

    # –õ–æ–≥–∏ API –∑–∞–ø—Ä–æ—Å–æ–≤
    logger.add(
        "logs/api.log",
        format="{time:YYYY-MM-DD HH:mm:ss} | {extra[method]} {extra[url]} | "
               "Status: {extra[status_code]} | Duration: {extra[duration]}ms | {message}",
        level="INFO",
        rotation="20 MB",
        retention="14 days",
        filter=lambda record: "api_request" in record["extra"]
    )

    logger.info("–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ")


@asynccontextmanager
async def lifespan(app: FastAPI):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""

    # Startup
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ Telegram Marketplace...")

    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –ë–î
        logger.info("üìä –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        await create_tables()
        logger.success("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥—Ä—É–≥–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
        logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤...")

        # TODO: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞
        # TODO: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á
        # TODO: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Redis

        logger.success("‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã")
        logger.info(f"üåü {settings.PROJECT_NAME} v{settings.VERSION} –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")
        raise

    yield

    # Shutdown
    logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")

    try:
        # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        # TODO: –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Telegram –±–æ—Ç–∞
        # TODO: –ó–∞–∫—Ä—ã—Ç–∏–µ Redis —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        # TODO: –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞

        logger.success("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ: {e}")


def create_application() -> FastAPI:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""

    app = FastAPI(
        title=settings.PROJECT_NAME,
        version=settings.VERSION,
        description="Backend API –¥–ª—è Telegram –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π USDT –∏ –°–ë–ü –ø–ª–∞—Ç–µ–∂–µ–π",
        openapi_url=f"{settings.API_V1_STR}/openapi.json" if settings.DEBUG else None,
        docs_url="/docs" if settings.DEBUG else None,
        redoc_url="/redoc" if settings.DEBUG else None,
        lifespan=lifespan
    )

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
    setup_cors(app)

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
    setup_error_handlers(app)

    # Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
    @app.middleware("http")
    async def log_requests(request: Request, call_next):
        start_time = time.time()

        # –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–∏–π –∑–∞–ø—Ä–æ—Å
        logger.bind(
            method=request.method,
            url=str(request.url),
            api_request=True
        ).info(f"üì® {request.method} {request.url.path}")

        try:
            response = await call_next(request)

            # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            duration = round((time.time() - start_time) * 1000, 2)

            # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            level = "error" if response.status_code >= 400 else "info"
            logger.bind(
                method=request.method,
                url=str(request.url),
                status_code=response.status_code,
                duration=duration,
                api_request=True
            ).log(level, f"üì§ Response {response.status_code}")

            return response

        except Exception as e:
            duration = round((time.time() - start_time) * 1000, 2)
            logger.bind(
                method=request.method,
                url=str(request.url),
                status_code=500,
                duration=duration,
                api_request=True
            ).error(f"üí• –û—à–∏–±–∫–∞: {e}")
            raise

    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–æ–≤
    app.include_router(
        api_router,
        prefix=settings.API_V1_STR
    )

    return app


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
setup_logging()

# –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = create_application()


@app.get("/health", tags=["Health"])
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    return {
        "status": "healthy",
        "service": settings.PROJECT_NAME,
        "version": settings.VERSION,
        "environment": settings.ENVIRONMENT
    }


@app.get("/", tags=["Root"])
async def root():
    """–ö–æ—Ä–Ω–µ–≤–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç"""
    return {
        "message": f"üõçÔ∏è {settings.PROJECT_NAME} API",
        "version": settings.VERSION,
        "docs": "/docs" if settings.DEBUG else "Disabled in production"
    }


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è Telegram webhook (–µ—Å–ª–∏ –Ω—É–∂–µ–Ω)
@app.post("/webhook/telegram", tags=["Webhook"])
async def telegram_webhook(request: Request):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ Telegram webhook"""
    try:
        update_data = await request.json()
        logger.info(f"üì± –ü–æ–ª—É—á–µ–Ω Telegram update: {update_data.get('update_id')}")

        # TODO: –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ—Ä–µ–∑ aiogram

        return {"status": "ok"}

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {e}")
        return JSONResponse(
            status_code=500,
            content={"error": "Webhook processing failed"}
        )


if __name__ == "__main__":
    import uvicorn

    logger.info("üî• –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏")

    uvicorn.run(
        "app.main:app",
        host="0.0.0.0",
        port=8000,
        reload=settings.DEBUG,
        log_config=None,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º loguru –≤–º–µ—Å—Ç–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ
        access_log=False   # –û—Ç–∫–ª—é—á–∞–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    )