version: '3.8'

services:
  # PostgreSQL база данных
  postgres:
    image: postgres:15-alpine
    container_name: marketplace_postgres
    environment:
      POSTGRES_DB: marketplace_db
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - marketplace_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d marketplace_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis для кеширования
  redis:
    image: redis:7-alpine
    container_name: marketplace_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - marketplace_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # FastAPI приложение
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: marketplace_app
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql+asyncpg://user:password@postgres:5432/marketplace_db
      - DATABASE_URL_SYNC=postgresql://user:password@postgres:5432/marketplace_db
      - REDIS_URL=redis://redis:6379/0
      - DEBUG=true
      - ENVIRONMENT=development
    volumes:
      - ./logs:/app/logs
      - ./static:/app/static
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - marketplace_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Adminer для управления БД (опционально)
  adminer:
    image: adminer:latest
    container_name: marketplace_adminer
    ports:
      - "8080:8080"
    environment:
      ADMINER_DEFAULT_SERVER: postgres
    depends_on:
      - postgres
    networks:
      - marketplace_network
    profiles:
      - tools

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  marketplace_network:
    driver: bridge